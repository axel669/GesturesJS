let isMobile = typeof orientation != "undefined"
    || navigator.userAgent.indexOf("Mobile") != -1
let handlers = Map*()

let touchVars = {}
let addHandler = (name, handler) => {
    if typeof handler == "function" {
        handler = handler()
    }

    handlers.set(name, handler)
    touchVars[name] = {}
}
let createEvent = (type, source) => {
    let newEvt = CustomEvent*(
        type
        {bubbles: true, cancelable: true}
    )

    for prop, value of source {
        newEvt[prop] = value
    }

    return newEvt
}
let copyTouchEvent = (touch) => {
    touch.clientX
    touch.clientY
    touch.pageX
    touch.pageY
    touch.screenX
    touch.screenY
    touch.identifier
    touch.target
    touch.sourceElement
    id: touch.identifier
}

let delay = (func) => setTimeout(func, 0)

let polarVector = (a, b) => {
    let dx = b.clientX - a.clientX
    let dy = b.clientY - a.clientY

    let angle = (
        Math.atan2(dy, dx)
        * (180 / Math.PI)
        + 450
    ) % 360
    let magnitude = Math.sqrt(dx ** 2 + dy ** 2)

    return {angle, magnitude}
}

let sharedVars = {}
let convertTouches = (source) => {
    let touches = [...source]

    for touch in touches {
        touch.timestamp = Date.now()
        touch.id = touch.identifier
    }

    return touches
}
let touchMapper = (name, reset = false) =>
    (touch) => {
        if (reset == true) {
            touchVars[name][touch.identifier] = {}
        }
        return {
            ...copyTouchEvent(touch)
            vars: {
                ...touchVars[name][touch.identifier]
                ...sharedVars[touch.identifier]
            }
        }
    }
let handleTouchList = (list, individual, touches, evt) => {
    if list != void {
        list(touches, evt)
    }
    if individual == void {
        return
    }
    for touch in touches {
        individual(touch, evt)
    }
}
window.addEventListener(
    "touchstart"
    (evt) => {
        let touches = [...evt.changedTouches]
        for touch in touches {
            touch.timestamp = Date.now()
            sharedVars[touch.identifier] = {start: touch}
        }
        for [name, handler] in handlers {
            handleTouchList(
                handler.start
                handler.startItem
                touches.map(
                    touchMapper(name, true)
                )
                evt
            )
        }
    }
    false
)
window.addEventListener(
    "touchmove"
    (evt) => {
        let touches = [...evt.changedTouches]
        for touch in touches {
            let shared = sharedVars[touch.identifier]
            touch.timestamp = Date.now()
            shared.vector = polarVector(
                shared.start
                touch
            )
        }
        for [name, handler] in handlers {
            handleTouchList(
                handler.move
                handler.moveItem
                touches.map(
                    touchMapper(name)
                )
                evt
            )
        }
    }
)
window.addEventListener(
    "touchend"
    (evt) => {
        let touches = [...evt.changedTouches]
        for touch in touches {
            let shared = sharedVars[touch.identifier]
            touch.timestamp = Date.now()
            shared.vector = polarVector(
                shared.start
                touch
            )
        }
        for [name, handler] in handlers {
            handleTouchList(
                handler.end
                handler.endItem
                touches.map(
                    touchMapper(name)
                )
                evt
            )
        }
    }
)

if isMobile == false {
    console.log("GesturesJS will attach non-mobile listeners")
    let createSynthTouch = (mouseEvt) => {
        ...copyTouchEvent(mouseEvt)
        identifier: -10
        id: 10
        target: currentMouseTarget
        suorceElement: currentMouseTarget
    }

    let mut currentMouseTarget = null
    let mut mouseIsDown = false

    let dispatchSyntheticEvent = (evt, type) => {
        let changedTouches = [createSynthTouch(evt)]
        evt.target.dispatchEvent(
            createEvent(
                type
                {
                    changedTouches
                    touches: changedTouches
                    syntheticEvent: true
                }
            )
        )
    }

    window.addEventListener(
        "mousedown"
        (evt) => {
            if evt.button == 0 {
                mouseIsDown = true
                currentMouseTarget = evt.target
                dispatchSyntheticEvent(evt, "touchstart")
            }
        }
        true
    )
    window.addEventListener(
        "mousemove"
        (evt) => {
            if mouseIsDown == true {
                dispatchSyntheticEvent(evt, "touchmove")
            }
        }
        true
    )
    window.addEventListener(
        "mouseup"
        (evt) => {
            if evt.button == 0 && mouseIsDown == true {
                mouseIsDown = false
                dispatchSyntheticEvent(evt, "touchend")
                currentMouseTarget = null
            }
        }
        true
    )
}

addHandler(
    "active-touch"
    () => {
        let counts = WeakMap*()

        let inc = (elem) => {
            let count = counts.get(elem) ?? 0
            counts.set(elem, count + 1)
        }
        let dec = (elem) => {
            let newCount = counts.get(elem) - 1
            counts.set(elem, newCount)
            return newCount
        }

        return {
            moveItem(touch) => console.log(touch.vars.vector)
        }
    }
)
